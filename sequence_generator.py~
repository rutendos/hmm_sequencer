#--------------------------------------
#Extenal imports
#--------------------------------------

import numpy as np


def sequence_input(sequence):
    '''takes in sequences from base_content that are in .csv format and 
    frequencies per position to use in simulating sequences using a 
    1st order Markov Model.

    Parameters
    ----------
    sequence : csv file 
        with columns of sequences (A, T, G, C)
    
    Returns
    -------
    position_frequencies : list of lists
        per position base frequencies 
        a list for each position

    
    '''

    position_feq = []

    with open(sequence) as seq:

        ##remove the header line
        lines = seq.readlines()[1:]
        for i in range(len(lines)):
            pos_prob = []
            try:
                pos_prob.append(lines[i].strip('\n').split(',')[1])
                pos_prob.append(lines[i].strip('\n').split(',')[2])
                pos_prob.append(lines[i].strip('\n').split(',')[3])
                pos_prob.append(lines[i].strip('\n').split(',')[4])
                position_feq.append(pos_prob)
            except IndexError:
                
                pos_prob.append(lines[i].strip('\n').split('\t')[1])
                pos_prob.append(lines[i].strip('\n').split('\t')[2])
                pos_prob.append(lines[i].strip('\n').split('\t')[3])
                pos_prob.append(lines[i].strip('\n').split('\t')[4])
                position_feq.append(pos_prob)
            else:
                print("Check the input file. \n It should be tab or comma separated")


    return(position_feq)
        
def sequence_generator(position_feq, exp, seq_len=3001, N=500):
    '''takes in frequencies per position and simulates sequences using a 
    1st order Markov Model.

    Parameters
    ----------
    position_feq : list of lists 
        per position base frequencies

    exp : str
        name of the experiment

    seq_len : int
        length of sequence to be generated

    N : int
        number of sequences to be generated
    
    Returns
    -------
    names : list
        names for each sequence (arbritrary)

    generated_seqs : list
        list of sequences generated

    '''

    num_seqs = int(N)
    sequence_length = int(seq_len)

    generated_seqs = []
    names = []

    for j in range(num_seqs):
        #sequence = []
    
        #for i in range(sequence_length):
        
        #sequence.append(np.random.choice(['A','T','G','C'], 1, p=position_feq[i])[0])
        sequence = [np.random.choice(['A', 'T', 'G', 'C'], 1, p=position_feq[i])[0] for i in range(sequence_length)]
        names.append('>' + str(exp)+'_random_sequence_'+ str(j))
        generated_seqs.append(''.join(sequence))

    return names, generated_seqs


def write_fasta(generated_sequences, exp, outdir):
    ''' writes sequences generated into fasta format
    '''

    out_file = open(outdir + str(exp) + "_simulated.fa", "w")

    for i in range(len(generated_sequences[0])):
        out_file.write(generated_sequences[0][i] + "\n" + generated_sequences[1][i] + "\n")
    out_file.close()
